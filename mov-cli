#!/usr/bin/env bash

c_red="\033[1;31m"
c_green="\033[1;32m"
c_yellow="\033[1;33m"
c_blue="\033[1;34m"
c_magenta="\033[1;35m"
c_cyan="\033[1;36m"
c_reset="\033[0m"

_help () {
  cat <<EOF
  Usage:
    $(basename $0) [-d | -p <download_dir>] [<query>]
    $(basename $0) [-v] [<query>]
    $(basename $0) [-t] [<query>]
    $(basename $0) -h

  Options:
    -h show help
    -d download video
    -t search tv-show (default search:movies)
    -p download video to specified directory
EOF
}

_err () {
    printf "$c_red%s$c_reset\n" "$*" >&2
}

_get_query () {
  if [[ -z "$*" ]]; then
    [[ "$is_show" -eq "0" ]] && printf "search movie: " || printf "search tv-show: "
    read -r movie
  else
    movie=$*
  fi
  query=$(printf "%s" "$movie" | tr " " "+")
}

_get_token () {
  printf "${c_blue}Fetching token.."
  token=$(curl -X POST -sc - -o /dev/null "$base_url:5679/authorization/session/continue?contentUsageType=Viewing" -A "uwu" -H "Origin: $base_url" -e "$base_url" | sed -n 's/.*ipiid\t//p')
}

_input() {
  printf "$c_yellow  $1??(1-%s):$c_reset " "$2"
  read -r x
  while [[ -z "$x" ]] || [[ ! "$x" == "$x" ]] || (( $x < 1 || $x > $2 )); do
    _err "Invalid choice"
    printf "$c_yellow  $1??(1-%s):$c_reset " "$2"
    read -r x
  done
  [[ "$3" -eq "0" ]] && season_choice=$x || ep_no=$x
  unset x
}

_stream () {
  case $player_fn in
    mpv)
      mpv $1 --title="$2" --save-position-on-quit -fs
  esac
}

_download () {
  printf "${c_blue}Downloading %s${c_reset}\n" "$2"
  aria2c --summary-interval=0 -x 16 -s 16 --referer="$base_url" "$1" --dir=$download_dir -o "${2}.mp4" --download-result=hide
}

_get_show () {
  printf "\33[2K\r${c_blue}Searching query.."
  data=$(curl -s "$base_url/tv-shows/trending?search=$query")
  results=$(printf "%s" "$data" | sed "s/:\"$movie.*//" | tr '{|}' '\n' | sed -nE 's/.*"name":"([^"]*)","numberOfSeasons":(.*),.*numberOfEpisod.*"id":(.*),"available":true.*/\2 \3 \1/p')
  [[ -z "$results" ]] && printf "\33[2K\r${c_red}No search results found${c_reset}" && exit 0
  printf "\33[2K\r${c_green}Results found\n"
  result=$(printf "%s" "$results" | fzf | tr "[:punct:]" " " | tr -s " " | tr ' |[:upper:]' '-|[:lower:]')
  [[ -z "$result" ]] && _err "No tv-show selected" && exit 0
  printf "${c_magenta}selected $result\n${c_blue}Fetching season/episode list"
  build_id=$(printf "%s" "$data" | sed -nE 's/.*buildId\":"(.*)",.*run.*/\1/p')
  result_id=$(printf "%s" "$result" | cut -d"-" -f2-)
  show_all=$(curl -s "$base_url:443/_next/data/$build_id/tv-show/$result_id/season-1/episode-1.json" -b "theflix.ipiid=$token" | sed 's/selectedTvSeason.*//' | tr '{|}' '\n')
  printf "\33[2K\r${c_green}Seasons/Episodes list fetched\n"
  _get_show_se
}

_get_show_se () {
  season=$(printf "%s" "$result" | cut -d"-" -f1)
  _input "Season" "$season" "0"
  noofeps=$(printf "%s" "$show_all" | sed -nE "s/\"name\":\".*$season_choice\",\"numberOfEpisodes\":(.*),\"seasonN.*/\1/p")
  _input "Episode" "$noofeps" "1"
  _get_ep_link "$season_choice" "$ep_no"
}

_get_ep_link (){
  tput clear
  printf "${c_blue}Loading Episode $2"
  id=$(printf "%s" "$show_all" | sed -nE "s/^\"episodeNumber\":$2,.*name.*\"seasonNumber\":$1,.*videos\":\[\"(.*)\"\]/\1/p")
  display=$(printf "%s S%s E%s" "$(printf "$result_id" | cut -d"-" -f2- | tr "-" " ")" "$1" "$2")
  [[ -z "$id" ]] && printf "\33[2K\r${c_red}Episode doesn't exist on this site${c_reset}" || _play_link "tv"
}

_get_movie () {
  printf "\33[2K\r${c_blue}Searching query.."
  results=$(curl -s "$base_url/movies/trending?search=$query" | sed "s/:\"$movie.*//" | tr '{|}' '\n' | sed -nE 's/^\"name\":"([^"]*)",.*available\":true.*videos\":\["(.*)"\],.*/\2\t\1/p')
  [[ -z "$results" ]] && printf "\33[2K\r${c_red}No search results found${c_reset}" && exit 0
  printf "\33[2K\r${c_green}Results found\n"
  movie_name=$(printf "$results" | cut -f2- | fzf)
  [[ -z "$movie_name" ]] && _err "No movie chosen" && exit 0
  tput clear
  printf "${c_blue}Fetching movie"
  display=$(printf "%s" "$movie_name" | tr -d '[:punct:]')
  id=$(printf "%s" "$results" | sed -n "s/\t$movie_name$//p")
  _play_link "movies"
}

_play_link () {
  printf "\33[2K\r${c_blue}Fetching video link"
  video_link="$(curl -s "$base_url:5679/$1/videos/$id/request-access?contentUsageType=Viewing" -b "theflix.ipiid=$token" | sed -nE 's/.*url\":"([^"]*)",.*id.*/\1/p')"
  if [[ -z "$video_link" ]]; then
      printf "\33[2K\r${c_red}Video Url not found${c_reset}\n"
  else
      printf "\33[2K\r${c_green}Video link fetched${c_reset}\n%s" "$video_link"
      if [[ "$is_download" -eq "0" ]]; then
    _stream "$video_link" "$display"
      else
    _download "$video_link" "$display"
      fi
  fi
}

trap "exit 0" INT HUP
base_url="https://theflix.to"
player_fn="mpv"
is_show=0
is_download=0
download_dir=.

while getopts 'dhtp:v' OPT; do
  case $OPT in
    d)
      is_download=1
      ;;
    t)
      is_show=1
      ;;
    p)
      is_download=1
      download_dir=$OPTARG
      ;;
    *|h)
      _help
      exit 2
      ;;
  esac
done
shift $((OPTIND - 1))

_get_query "$*"
_get_token
[[ "$is_show" -eq "0" ]] && _get_movie || _get_show

while :; do
  printf "\n${c_green}Currently playing %s\n" "$display"
  printf "$c_blue(%s) %s$c_reset\n" "s" "search next"
  [[ "$is_show" -eq "1" ]] && [[ "$ep_no" != "$noofeps" ]] && printf "$c_yellow(%s) %s$c_reset\n" "n" "next"
  [[ "$is_show" -eq "1" ]] && [[ "$ep_no" != "1" ]] && printf "$c_cyan(%s) %s$c_reset\n" "p" "previous"
  [[ "$is_show" -eq "1" ]] && printf "$c_green(%s) %s$c_reset\n" "c" "change season"
  [[ "$is_show" -eq "1" ]] && printf "$c_blue(%s) %s$c_reset\n" "e" "select episode"
  printf "$c_magenta(%s) %s$c_reset\n" "d" "download current video"
  printf "$c_red(%s) %s$c_reset\n" "q" "exit"
  printf "${c_green}Enter choice:$c_reset "
  read choice
  case $choice in
    s)
      _get_query
      [[ "$is_show" -eq "0" ]] && _get_movie || _get_show
      ;;
    d)
      _download "$video_link" "$display";;
    n)
      ep_no=$((ep_no + 1))
      [[ "$ep_no" -gt "$noofeps" ]] && _err "Episode out of range" && ep_no=$((ep_no - 1)) || _get_ep_link "$season_choice" "$ep_no";;
    p)
      ep_no=$((ep_no - 1))
      [[ "$ep_no" -lt "1" ]] && _err "Episode out of range" && ep_no=$((ep_no + 1)) || _get_ep_link "$season_choice" "$ep_no";;
    e)
      _input "Episode" "$noofeps" "1"
      _get_ep_link "$season_choice" "$ep_no";;
    c)
      _get_show_se;;
    q)
      break;;
    *)
      _err "invalid choice";;
    esac
done
